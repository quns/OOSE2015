import java.awt.Graphics;
import java.awt.Color;
import java.util.Random;

public class Powerup {
	int xpos,ypos; //Powerup x,y position
	int powerid; //Which powerup the powerup grants
	int alive = 1; //If the powerup is active
	Random random = new Random(); //Random RNG to determine which powerup it grants
	long start; //Timer start
	long elapsedTime; //Timer elapsed
	
	public Powerup(int x, int y) { //Constructor
		this.xpos = x; //X position
		this.ypos = y; //Y position
		int randomint = random.nextInt(3)+1; //Grant random number
		this.powerid = randomint; //Assign random number to powerid
	}
	
	public void update() { //Update
		if(alive == 1) ypos +=2; //Make powerup fall continually if it is active
		if(alive == 0) ypos = 650; //If the powerup is inactive, move it ouside the active playing field
		
		if(ypos > 600) alive = 0; //If powerup hits bottom, make it inactive
		
		elapsedTime = System.currentTimeMillis() - start; //Calculate elapsed time.
		
		if(elapsedTime > 10000 && elapsedTime < 10050 ) GameLoop.paddleWiden = false; //Disable the paddle widdening powerup if 10 seconds pass. 
		
		//Powerup paddle collision detection.
		if(xpos + 20 > GameLoop.x && xpos < GameLoop.x+GameLoop.paddlewidth && ypos + 20 > GameLoop.y && ypos < GameLoop.y + GameLoop.paddleheight) {
			alive = 0; //Set powerup to inactive
			
			if(powerid == 1) { //Detectes which effect to grant to play, depending on powerid.
				if(GameLoop.balls[0].alive == 0) { //First one spawns an extra ball, else if used so it doesen't remove an existing ball from the screen
				GameLoop.balls[0].setPos((int)(GameLoop.x+GameLoop.paddlewidth*0.5), 500); //Spawn ball above player
				GameLoop.balls[0].alive = 1; //Set it to alive
				GameLoop.balls[0].speedX = 2; //horizontal speed 2
				GameLoop.balls[0].speedY = -2; //Vertical speed 2 upwards
				}
				else if(GameLoop.balls[1].alive == 0) {
					GameLoop.balls[1].setPos((int)(GameLoop.x+GameLoop.paddlewidth*0.5), 500);
					GameLoop.balls[1].alive = 1;
					GameLoop.balls[1].speedX = 3;
					GameLoop.balls[1].speedY = -3;
				}
				else if(GameLoop.balls[2].alive == 0) {
					GameLoop.balls[2].setPos((int)(GameLoop.x+GameLoop.paddlewidth*0.5), 500);
					GameLoop.balls[2].alive = 1;
					GameLoop.balls[2].speedX = 3;
					GameLoop.balls[2].speedY = -3;
				}
				else if(GameLoop.balls[3].alive == 0) {
					GameLoop.balls[3].setPos((int)(GameLoop.x+GameLoop.paddlewidth*0.5), 500);
					GameLoop.balls[3].alive = 1;
					GameLoop.balls[3].speedX = 3;
					GameLoop.balls[3].speedY = -3;
				}
				else if(GameLoop.balls[4].alive == 0) {
					GameLoop.balls[4].setPos((int)(GameLoop.x+GameLoop.paddlewidth*0.5), 500);
					GameLoop.balls[4].alive = 1;
					GameLoop.balls[4].speedX = 3;
					GameLoop.balls[4].speedY = -3;
				}
				
			}
			
			if(powerid == 2) { //Second powerup widens the paddle by enabling the paddle widdening boolean.
				GameLoop.paddleWiden = true;
				start = System.currentTimeMillis(); //Time since paddle widen was activated
			}
			
			if(powerid == 3) { //Third powerup grants an extra life
				GameLoop.life++;
			}
		}
		
	}
	
	public void setPos(int x, int y) { //Manually set x,y position
		xpos = x;
		ypos = y;
	}
	
	public void newPower() { //Randomizes which power the powerup grants
		int randomint = random.nextInt(3)+1;
		this.powerid = randomint;
	}

	public void display(Graphics d) { //Display the powerup
		if(powerid == 1) { //Changes the color of the powerup depending on the powerid
			d.setColor(Color.red);
			d.fillOval(xpos, ypos, 20, 20);
		}
		else if(powerid == 2) {
			d.setColor(Color.blue);
			d.fillOval(xpos, ypos, 20, 20);
		}
		else if(powerid == 3) {
			d.setColor(Color.orange);
			d.fillOval(xpos, ypos, 20, 20);
		}
		else if(powerid == 4){
			d.setColor(Color.pink);
			d.fillOval(xpos, ypos, 20, 20);
		}
	}
}
